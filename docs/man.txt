Заметки по терминологии Kubernetes:
При создании Service приложение может быть доступно через:
ClusterIP - IP только внутри кластера (значение по умолчанию)
NodePort - Определенный порт на всех Worker Nodes в кластере
ExternalName - DNS CNAME Record
LoadBalancer - балансировщик, который распределяет соединения по разным подам

Pod - наименьшая единица Kubernetes и мы не работаем с ним напрямую(видимо обычно?)

Deployment - абстракция, которая позволяет работать с подами

Deployment управляет - >
 - > ReplicaSet управляет ->
 - > Pod - это абстракци контейнера

 Все что ниже Deployment обрабатывается кубернетесом

===================
Полезные команды:
===================
minikube addons list - список дополнений

minikube addons enable metallb - включаем аддон с metallb

kubectl get pods -n metallb-system - посмотреть два запущенных пода в namespace metallb

minikube addons configure metallb
Сконфигурировать первый и последний ip адрес для балансировщика.
Адрес надо брать из того диапазона в котором находится minikube.

minikube ip
Узнать адрес хоста с миникубом

kubectl get ns
Получить список всех неймспейсов

kubectl describe configmap config -n metallb-system
Показать конфиг для metallb


kubectl describe pod [pod name]
Выводит подробную информацию о поде


kubectl get pod
получить список всех подов

kubectl create deployment [depl name] --image=[image name]
Создает deployment с указанным именем и из указанного образа

kubectl edit deployment [depl name]
Открывает для правки конкретный deployment

kubectl delete deployment [name]
Удаляет Deployment вместе с подами и всем что ниже его

kubectl logs [pod name]
Выводит логи изнутри пода, если они там есть

kubectl exec -it [pod name] -- /bin/bash
Запускает внутри конкретного пода какую то команду, в данном случае bash

kubectl apply -f [file name]
Запускает Deployment из конфигурационного файла

kubectl get pod -o wide
Вывести более подробную информацию о подах - например IP

kubectl get deployment nginx-deployment -o yaml
Выводит информацию о Deployment дополненную разделом Status который хранится и обновляется из etcd

minikube service mongo-express-service
Назначает определенному сервису с типом LoadBalancer внешний IP, т.е. доступный извне кластера, например с хоста, на котором запущен и работает миникуб
======================================================================================================

Структура конфигурационного файла.

В начале:
apiVersion: v1 - версия
kind: Deployment - тип объекта - например деплоймент или сервис

Каждый конфигурационный файл делится на 3 части:
1.  metadata
Описание того что определяет конфиг - например name - имя

2. specification
Конкретные параметры для каждого пода
Спецификации могут быть различными в зависимости от типа компонента.
Раздел template описывается для конфига типа Deployment.
Имеет также свой раздел metadata для спецификации.
Имеет также свой раздел spec - в котором описывается спецификации для подов.
Это является blueprint для пода.
Там определяются порты, образ контейнера, имя и др.

3. status
генерируется автоматически и добавляется кубернетесом

Status хранится в etcd. Там хранится status по любому компоненту кубернетеса.
Кубернетес непрерывно проверяет состояние статуса и спецификации для каждого пода, и если они отличаются (например в конфиге должно быть две реплики а реально работает только одна, потому что второй под упал) - старается привести текущий статус в состояние из конфига.
---

Labels and selectors.
Раздел metadata содержит Labels
Раздел spec содержит selectors

В информации о поде, в разделе metadata определяется labels.
В spec у Deployment определяется labels для связи с подами.

В metadata у Deployment определяется labels, которые связывают Service с определенным Deployment или с подом.

В разделе spec у Service описывается selector, который соединяется с Pods через labels